GTCEuStartupEvents.registry('gtceu:machine', event => {

    event.create('tree_synthesizer', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType('tree_greenhouse')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.OC_NON_PERFECT])
        .appearanceBlock(() => Block.getBlock('gtceu:robust_machine_casing'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('AAAAAAAAAAA', 'AAAAAAAAAAA', 'BACCCCCCCAB', 'BACCCCCCCAB', 'BACCCCCCCAB', 'BACCCCCCCAB', 'BACCCCCCCAB', 'BACCCCCCCAB', 'BACCCCCCCAB', 'BACCCCCCCAB', '#BACCCCCAB#', '#BACCCCCAB#', '##BACCCAB##', '###BAAAB###', '####BBB####') 
            .aisle('AAAAAAAAAAA', 'ADDDDDDDDDA', 'A         A', 'A         A', 'A         A', 'A         A', 'A         A', 'A         A', 'A         A', 'A         A', 'BA       AB', 'BA       AB', '##AA   AA##', '####ACA####', '###########') 
            .aisle('AAAAAAAAAAA', 'ADDDDDDDDDA', 'C         C', 'C         C', 'C         C', 'C         C', 'C   EEE   C', 'C   EEE   C', 'C         C', 'C         C', 'A         A', 'A         A', 'BAAA   AAAB', '####ACA####', '###########') 
            .aisle('AAAAAAAAAAA', 'ADDDDDDDDDA', 'C         C', 'C         C', 'C         C', 'C         C', 'C  EEFEE  C', 'C  EEEEE  C', 'C   EEE   C', 'C         C', 'C         C', 'C         C', 'AAA     AAA', 'B##ACCCA##B', '###########') 
            .aisle('AAAAAAAAAAA', 'ADDDDDDDDDA', 'C         C', 'C         C', 'C         C', 'C    F    C', 'C EEEEEEE C', 'C EEEEEEE C', 'C  EEEEE  C', 'C    E    C', 'C         C', 'C         C', 'C         C', 'AAACCCCCAAA', 'B#########B') 
            .aisle('AAAAAAAAAAA', 'ADDDDGDDDDA', 'C    F    C', 'C    F    C', 'C    F    C', 'C   FFF   C', 'C EFEFEFE C', 'C EEEFEEE C', 'C  EEEEE  C', 'C   EEE   C', 'C         C', 'C         C', 'C         C', 'ACCCCCCCCCA', 'B#########B') 
            .aisle('AAAAAAAAAAA', 'ADDDDDDDDDA', 'C         C', 'C         C', 'C         C', 'C    F    C', 'C EEEEEEE C', 'C EEEEEEE C', 'C  EEEEE  C', 'C    E    C', 'C         C', 'C         C', 'C         C', 'AAACCCCCAAA', 'B#########B') 
            .aisle('AAAAAAAAAAA', 'ADDDDDDDDDA', 'C         C', 'C         C', 'C         C', 'C         C', 'C  EEFEE  C', 'C  EEEEE  C', 'C   EEE   C', 'C         C', 'C         C', 'C         C', 'AAA     AAA', 'B##ACCCA##B', '###########') 
            .aisle('AAAAAAAAAAA', 'ADDDDDDDDDA', 'C         C', 'C         C', 'C         C', 'C         C', 'C   EEE   C', 'C   EEE   C', 'C         C', 'C         C', 'A         A', 'A         A', 'BAAA   AAAB', '####ACA####', '###########') 
            .aisle('AAAAAAAAAAA', 'ADDDDDDDDDA', 'A         A', 'A         A', 'A         A', 'A         A', 'A         A', 'A         A', 'A         A', 'A         A', 'BA       AB', 'BA       AB', '##AA   AA##', '####ACA####', '###########') 
            .aisle('AAAAA@AAAAA', 'AAAAAAAAAAA', 'BACCCCCCCAB', 'BACCCCCCCAB', 'BACCCCCCCAB', 'BACCCCCCCAB', 'BACCCCCCCAB', 'BACCCCCCCAB', 'BACCCCCCCAB', 'BACCCCCCCAB', '#BACCCCCAB#', '#BACCCCCAB#', '##BACCCAB##', '###BAAAB###', '####BBB####') 
            .where('A', Predicates.blocks('gtceu:robust_machine_casing')
                .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
				.or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
            .where('B', Predicates.blocks('gtceu:kovar_frame'))
            .where('C', Predicates.blocks('gtceu:laminated_glass'))
            .where(' ', Predicates.air())
            .where('#', Predicates.any())
            .where('D', Predicates.blocks('minecraft:grass_block'))
            .where('E', Predicates.blocks('minecraft:oak_leaves'))
            .where('F', Predicates.blocks('minecraft:oak_log'))
            .where('G', Predicates.blocks('minecraft:dirt'))
            .where('@', Predicates.controller(Predicates.blocks(definition.get())))
            .build())
        .workableCasingRenderer('gtceu:block/casings/solid/machine_casing_robust_tungstensteel',
        'gtceu:block/machines/extruder', false);
        
});